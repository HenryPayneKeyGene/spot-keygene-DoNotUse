#  Copyright (c) Romir Kulshrestha 2023.
#  You may use, distribute and modify this code under the terms of the MIT License.
#  You should have received a copy of the MIT License with this file. If not, please visit:
#  https://opensource.org/licenses/MIT

import logging
import os

from .blk import BLK
from .spot import Spot
from .util import countdown


class Run:
    def __init__(self, config):
        self.config = config
        self.logger = logging.getLogger(__name__)

        self.logger.info("Starting up")
        self.robot = Spot(config['spot'])
        self.lidar = BLK()
        # self.nav = self.robot.graph_nav_interface

        self.starting_fiducial = config['starting_fiducial']

    def __del__(self):
        if hasattr(self, "robot"):
            self.robot.shutdown()
        if hasattr(self, "lidar"):    
            self.lidar.shutdown()

    def record_mission(self):
        # disable estop and enable manual control
        self.robot.release_estop()
        self.robot.release()

        # wait for fiducial
        self.logger.info(f"Waiting for fiducial...")
        self.robot.recording_interface.wait_for_fiducial()
        self.starting_fiducial = self.robot.recording_interface.get_fiducial_objects()[0]

        # start recording
        self.logger.info("Starting recording...")
        countdown(5)
        self.robot.recording_interface.start_recording()

        self.logger.info("Recording... use the tablet to drive around the environment.")
        input("Press enter to stop recording...")

        # stop recording and save
        self.logger.info("Stopping recording...")
        self.robot.recording_interface.generate_mission()

        # power off
        self.robot.power_off()

    def autowalk(self, mission_file):
        """Walk around the environment and collect data."""

        # load mission from file
        # Check if mission_file exists.
        if not os.path.isfile(mission_file):
            # If this is a non-custom autowalk mission, there were checks for both "autogenerated" and
            # "autogenerated.node" files.
            self.logger.fatal(f'Unable to find mission file: {mission_file} or {mission_file + ".node"}.')
            return

        # upload graph and mission
        self.logger.info("Uploading mission data...")
        self.nav.upload_graph_and_snapshots()
        self.nav.upload_mission(mission_file)

        # wait for fiducial
        self.logger.info(f"Looking for fiducial {self.starting_fiducial}...")
        self.robot.release()
        self.robot.release_estop()
        self.robot.recording_interface.wait_for_fiducial(self.starting_fiducial)

        # reset robot
        self.logger.info("Resetting robot...")
        self.robot.power_off()

        # run mission
        self.logger.info("Starting mission...")
        countdown(5)
        self.nav.run_mission()
